@page "/ServiceAreas/{ServiceAreaId:int}/Bins"
@using Oyster.Domain.Models.Enums
@inject DataContext Db
@inject NavigationManager Nav

<MudText Typo="Typo.h4" GutterBottom="true">Service area: @_serviceArea.AreaName (@_serviceArea.BinAreas.Count locations)</MudText>

<MudExpansionPanels MultiExpansion="true" Elevation="1">
    <MudExpansionPanel Text="New data">
        <MudGrid Justify="Justify.FlexStart">
            <MudItem xs="4">
                <MudCard>
                    <MudCardContent>
                        <MudTextField T="string" Label="Service area" Disabled="true" Value="@_serviceArea.AreaName"></MudTextField>
                        <MudTextField @bind-Value="_newBinArea.AddressTitle" Label="Address title"></MudTextField>
                        <MudStack Row="true">
                            <MudNumericField T="decimal" @bind-Value="_newBinArea.Location[0]" Label="Latitude"></MudNumericField>
                            <MudNumericField T="decimal" @bind-Value="_newBinArea.Location[1]" Label="Longitude"></MudNumericField>
                        </MudStack>
                        <MudNumericField T="int" @bind-Value="_newBinArea.WeightAddition" Label="+ Weight"></MudNumericField>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="AddBinArea">Add bin area</MudButton>
                    </MudCardActions>
                </MudCard>
    
            </MudItem>
        </MudGrid>
    </MudExpansionPanel>

    <MudExpansionPanel Text="Bin areas" IsExpanded="_binAreasExpanded" IsExpandedChanged="b => _binAreasExpanded = b">
        <MudTable Items="_serviceArea.BinAreas">
            <HeaderContent>
                <MudTh>Address</MudTh>
                <MudTh>Location (lat,long)</MudTh>
                <MudTh>Additional weight</MudTh>
                <MudTh>Service area name</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Address">@context.AddressTitle</MudTd>
                <MudTd DataLabel="Location">@context.Location[0], @context.Location[1]</MudTd>
                <MudTd DataLabel="WeightAddition">@context.WeightAddition</MudTd>
                <MudTd DataLabel="ServiceArea">@_serviceArea.AreaName</MudTd>
                <MudTd DataLabel="Actions">
                    <MudButton Variant="Variant.Text" OnClick="async () => await SelectBinArea(context.Id)">Edit bins</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudExpansionPanel>
</MudExpansionPanels>

@if (_selectedBinArea is {} area)
{
    <MudText Class="mt-3" Typo="Typo.h4" GutterBottom="true">Bin area: @area.AddressTitle</MudText>
    <MudGrid Justify="Justify.FlexStart">
        @foreach (var bin in area.TrashBins)
        {
            <MudItem xs="3">
                <MudCard Outlined="true" Elevation="0">
                    <MudCardContent>
                        <MudText Typo="Typo.body2">Filled: @GetCircles(bin.FilledLevel)</MudText>
                        <MudText Typo="Typo.body2">Type: @bin.Type</MudText>
                        <MudText Typo="Typo.body2">State: @(DateTime.UtcNow.Subtract(bin.LastPingTimestamp).TotalMinutes < 1 ? "alive" : "dead")</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">See last state</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
        <MudItem xs="3">
            <MudCard Outlined="true" Elevation="0">
                <MudCardContent>
                    <MudTextField @bind-Value="_newTrashBin.SensorSerialNumber" Label="Sensor serial number" 
                                  Required="true" RequiredError="Sensor serial number is required"></MudTextField>
                    <MudSelect @bind-Value="_newTrashBin.Type" Required="true" Label="Bin type">
                        <MudSelectItem Value="TrashBinType.None">None</MudSelectItem>
                        <MudSelectItem Value="TrashBinType.Food">Food</MudSelectItem>
                        <MudSelectItem Value="TrashBinType.Mixed">Mixed</MudSelectItem>
                        <MudSelectItem Value="TrashBinType.Paper">Paper</MudSelectItem>
                        <MudSelectItem Value="TrashBinType.Plastics">Plastics</MudSelectItem>
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="AddTrashBin">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
}

@code {
    
    [Parameter]
    public int ServiceAreaId { get; set; }

    private NewBinArea _newBinArea = new();
    private NewTrashBin _newTrashBin = new();

    private ServiceArea _serviceArea = new();
    private bool _binAreasExpanded = true;
    private BinArea? _selectedBinArea;

    protected override async Task OnInitializedAsync()
    {
        var area = await Db.ServiceAreas.Include(s => s.BinAreas).FirstOrDefaultAsync(x => x.Id == ServiceAreaId);
        if (area is null)
        {
            Nav.NavigateTo("/ServiceAreas");
            return;
        }

        _serviceArea = area;

        await base.OnInitializedAsync();
    }

    private async Task AddBinArea()
    {
        var binArea = new BinArea
        {
            AddressTitle = _newBinArea.AddressTitle,
            Location = _newBinArea.Location,
            WeightAddition = _newBinArea.WeightAddition,
            ServiceAreaId = _serviceArea.Id
        };

        await Db.BinAreas.AddAsync(binArea);
        await Db.SaveChangesAsync();
        await OnInitializedAsync();

        _newBinArea = new NewBinArea();
    }

    private async Task SelectBinArea(int binAreaId)
    {
        _selectedBinArea = _serviceArea.BinAreas.FirstOrDefault(a => a.Id == binAreaId);
        if (_selectedBinArea is null) return;

        _binAreasExpanded = false;
        _selectedBinArea.TrashBins = await Db.TrashBins.Where(b => b.BinAreaId == _selectedBinArea.Id).ToListAsync();
    }

    private async Task AddTrashBin()
    {
        if (_selectedBinArea is null) return;
        if (_newTrashBin is {Type: TrashBinType.None, SensorSerialNumber: ""}) return;
        
        var trashBin = new TrashBin
        {
            BinAreaId = _selectedBinArea.Id,
            Type = _newTrashBin.Type,
            SensorSerialNumber = _newTrashBin.SensorSerialNumber,
            FilledLevel = 0,
            LastPingTimestamp = DateTime.MinValue
        };
        await Db.TrashBins.AddAsync(trashBin);
        await Db.SaveChangesAsync();
        await OnInitializedAsync();
        _newTrashBin = new NewTrashBin();
    }
    
    // ⬤ ◯
    private static string GetCircles(int level) => level switch
    {
        0 => "◯ ◯ ◯ ◯ ◯",
        1 => "⬤ ◯ ◯ ◯ ◯",
        2 => "⬤ ⬤ ◯ ◯ ◯",
        3 => "⬤ ⬤ ⬤ ◯ ◯",
        4 => "⬤ ⬤ ⬤ ⬤ ◯",
        5 => "⬤ ⬤ ⬤ ⬤ ⬤",
        _ => level.ToString()
    };

    private class NewBinArea
    {
        public string AddressTitle { get; set; } = default!;
        public decimal[] Location { get; set; } = { 0m, 0m };
        public int WeightAddition { get; set; }
    }

    private class NewTrashBin
    {
        public TrashBinType Type { get; set; } = TrashBinType.None;
        public string SensorSerialNumber { get; set; } = string.Empty;
    }
}
